- dynamic height and width
- stopping and starting via space
- seeking
- background
- edit different units
- update last measure is recognized by moo
 - configurable quantization
   - toggle on / off
   - drop down for speccing it
- play / stop buttons
- Saving file
- middle click drag
- have it look decent on scroll limits
5/31
- hear note on play (HARD) - had to factor out the logic independent of the current unit play position
- fix the offset
- zoom according to where cursor is right now
- tried the linear smoothing thing. it was way out of wack. not convergent.
- undo

6/04
- Implement the undo system drawpile uses
- Fix a few things like broken redo (no more chnaging of length 0)

6/6
1. Hook up the network. didn't get working b/c I was distracted but things are
   sending and I think they're generally connected!
2. Status bar, saving with network, reconnecting / starting new server etc.
3. Send view changes / edit state changes.
4. Redo in the right order
5. Demo it in a video, test with friends

6/7
1. Fix issue where other ppl's cursors show up in the wrong position
2. Hook up show-all checkbox properly
3. Users can specify names, show up next to cursor
4. Cursor disappears if user leaves / disconnect from server
5. Show list of connected users on left
6. fixed random bug where startup would loop forever if the file was too big

6/8
1. fix crash when you hold down a non-looping sample for too long
2. realize it's hard to fix the blip
3. I think fixed crash on server restart

6/9
1. alt scroll to change quant
2. ... read a bit about wav formats, turns out there's 8&16 bit linear PCM,
   then 32-bit float and 8-bit mu/a-law. pxtone only supports linear pcm but
   apparently that's usually enough?

   pxtnPulses are the wav / ogg / pt{voice,noise} loaders. pxtnwoice is like a
   variant over them that is the actual voice. then unit is unit.
   use pxtnService::Woice_read pxtnWoice::read to create a new instrument

   the io mate fns are for reading from an existing project.
   what's an assist woice / unit? they're names.

   pxtnUnit is largely - moo state (current woice, pan buffers), names, porta
   state. We could probably just make an extra pxtnUnit for note previews??

   Or still, just make pxtnWoice get stuff for you. Prob better b/c you can
   just directly set the woice. The only thing the unit sampl provides is vel,
   vol, and vol panning. Increment sample doesn't depend on the unit at all
   outside of woice.

6/11
1. Read about qlistview

6/12
1. ability to add units

6/13
1. this std::variant thing worked?!?
2. removing units
  - confirm box for delete
  - autofill name, double click to add
  - switch to unit directly

TODO:
 - adding / deleting instrs
 - Unit view, at least for drums
   - how many views do you want? the fewer, the easier it is to be 'present'
     with others.
   - something like ptweb
     - can pin instruments to be drums. (list of pinned is global)
 - moving voices up and down
 - show measure num, set loop points
   - will probably need some pixel font thing
 - edit while playing soundness
   - in particular, if a note is added as next event.
 - would be nice to click on a user and jump to their view
 - take some inspiration from domino midi! linear changing of params

Technical stuff:
 - streaming opreator for pxtnDesc
   - then you can generalize adding / subbing voices
 - factor out moo state from pxtn state
   - can then preview notes at the time they're played
 - server keeps its own state + running history (currently it plays back
   -everything-)

Synchronization:
 - Changes to units / adding voices?
 - drawpile autoresets, so that server doesn't have to send whole history over.
   - probably goes hand-in-hand with undo stack, which drawpile limits to
     globally 30. probably a good idea so we don't keep on growing in memory
   - undo stack is probably sth like: all committed local history prunes after
     reaching size X
   - autoreset is then being able to supply a base ptcop + a history with size
     > X
   - Undo stack isn't actually that important, usually only undo 1-2 at a time.
     But also, cheap to have a large stack.

Editor QoL:
 - Time bar at the top
 - lower bar for editing volume?
 - editing volume, etc. in bottom bar
 - follow playhead
 - Speed things up.
   - Separate audio thread with locking.
   - Bounding boxes for the undos/redos
     - At least on remote action rollback. You have to undo a prefix from the tip.
     - Also possibly useful for actual undos.
       - actually probably not useful for actual undos because there are cases
         where you'd have to roll everything back anyway.
   - Indexes for searching through list fast
     - according to botb event limit is 500k in the regular editor; here the
       limit is 1M.

       could probably handle 1000 events with little lag (1000 events * 1000
       actions = 1M iterations, not too much)
 - don't blip when seeking and playing again (hard due to QAudioOutput behavior)

Edit while playing soundness (low priority, unlikely to hit)
 - Add things between last event and next (before / after now?)
 - Delete things. Don't strand the pointer
 - Adjust the length of ON

Low priority:
 - Workflow: Copy paste - maybe not that important b/c when writing with others you're
   probably just going to be adding notes with them. it's much more like
   doodling! Or at least, it is right now.
 - Editor UI: Piano on the left
 - Misc UI: Recent connections dropdown
 - Custom icon for people's names?

Just general format? improvements:
 - A kind of meta instrument that changes depending on parameter or pitch

