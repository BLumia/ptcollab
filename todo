Log
---
- dynamic height and width
- stopping and starting via space
- seeking
- background
- edit different units
- update last measure is recognized by moo
 - configurable quantization
   - toggle on / off
   - drop down for speccing it
- play / stop buttons
- Saving file
- middle click drag
- have it look decent on scroll limits
5/31
- hear note on play (HARD) - had to factor out the logic independent of the current unit play position
- fix the offset
- zoom according to where cursor is right now
- tried the linear smoothing thing. it was way out of wack. not convergent.
- undo

6/04
- Implement the undo system drawpile uses
- Fix a few things like broken redo (no more chnaging of length 0)

6/6
1. Hook up the network. didn't get working b/c I was distracted but things are
   sending and I think they're generally connected!
2. Status bar, saving with network, reconnecting / starting new server etc.
3. Send view changes / edit state changes.
4. Redo in the right order
5. Demo it in a video, test with friends

6/7
1. Fix issue where other ppl's cursors show up in the wrong position
2. Hook up show-all checkbox properly
3. Users can specify names, show up next to cursor
4. Cursor disappears if user leaves / disconnect from server
5. Show list of connected users on left
6. fixed random bug where startup would loop forever if the file was too big

6/8
1. fix crash when you hold down a non-looping sample for too long
2. realize it's hard to fix the blip
3. I think fixed crash on server restart

6/9
1. alt scroll to change quant
2. ... read a bit about wav formats, turns out there's 8&16 bit linear PCM,
   then 32-bit float and 8-bit mu/a-law. pxtone only supports linear pcm but
   apparently that's usually enough?

   pxtnPulses are the wav / ogg / pt{voice,noise} loaders. pxtnwoice is like a
   variant over them that is the actual voice. then unit is unit.
   use pxtnService::Woice_read pxtnWoice::read to create a new instrument

   the io mate fns are for reading from an existing project.
   what's an assist woice / unit? they're names.

   pxtnUnit is largely - moo state (current woice, pan buffers), names, porta
   state. We could probably just make an extra pxtnUnit for note previews??

   Or still, just make pxtnWoice get stuff for you. Prob better b/c you can
   just directly set the woice. The only thing the unit sampl provides is vel,
   vol, and vol panning. Increment sample doesn't depend on the unit at all
   outside of woice.

6/11
1. Read about qlistview

6/12
1. ability to add units

6/13
1. this std::variant thing worked?!?
2. removing units
  - confirm box for delete
  - autofill name, double click to add
  - switch to unit directly

6/14 
1. more generic binary serialization
2. hopefully unicode?
3. fix crash when you rejoin. it was a deserial transaction mistake!
4. Add instruments! - lots of fumbling around with descriptor
5. remove instruments
6. sticky vel
7. host empty

6/15
1. Build windows version

6/16
1. Fix double voice issue with release rclick
2. Don't use shared ptr array, hopefully better fix now?
3. Exit menu item

6/17
1. fix Save As in windows (save to original file is still broken)
2. fix save to original file in windows. I think?
3. tested 'cross platform' by running in wine simultaneously with linux lol

6/19
1. Discovered that there's a problem with soft disconnects.

6/20
1. headless server sort of

6/21
1. Added logging, I think the thing causing the disconnects was the fact that
   transactions were being added up. So a rollback must've caused like a
   cascade of events written and made the write state weird. (Thanks to tests
   with steedfarmer)
2. Tested with steedfarmer again with the soft disconnect fix. Indeed, no more
   soft disconnects. But still the program sometimes hangs + memory explodes.

   Discoveries:
     - Sometimes a message is not sent if an instrument is simultaneously being added.
     - Hanging seems to be during repeated application of event undos/redos.
     - Hanging happens (in one case at least) after an edit message is dropped
       in roundtrip, prob. because that leads to a ton of local undo/redos.
       - I did see in my debugger like, 200k actions trying to be applied. I
         have no idea how it got to that number.
     - Turns out a message is dropped because QDataStream is not writable if we
       are simultaneously reading from it and hit ReadPastEnd. Dammit. Need
       separate read / write stream
     - But still, why does the action list grow to be so large? that's crazy.
       why does that cause things to hang? And was it really large? Or just
       that things sort of piled up with every additional message?

6/22
1. Figure out bug that causes hanging when an edit action is dropped. When
   having to undo and redo a lot, empty commands get added exponentially.
2. Find and fix a separate bug regarding using the wrong pxtone state to
   compute an undo. Didn't cause any problems this time but could bite in the
   future (e.g., two identical delete would be 'undone' as 2 identical adds
   instead of the second doing nothing)
3. Address QTBUG-63113 by having separate read / write streams. Now messages
   aren't dropped. Or they shouldn't be.

As a general note it's increasingly scary to touch the networking code...
worried about making further breaking changes. Don't have tests, also testing
localhost is just not the right environment.

This kind of thing where msgs get dropped is interesting - seems like a gap
fill architecture could work well.

4. Robust if you see an unexpected message (postel) from yourself.
   - if see later remote id, than what expected, just drop things presumably missed.
   - if earlier, just slot it in b/c everyone sees it in that order.

5. Ability to make server delay / drop msgs artificially

6/23 & 6/26
1. Some playtesting!

6/27
1. Add some slack in vertical momement before adjusting velocity
2. Cleaner note params on new note
3. See existing note velocity
4. Render just the window, less expensive note velocity (no more sqrt / exps)
5. Factor out moo state.
  - Accurate note preview: proper state at time of note w/ params of note.
  - Can still factor out more depending on what kind of preview to isolate.
    Current setup just makes it easy to configure a unit and then just play.
6. A tricky thing to get smooth playhead. Also renders better when there's a
   bigger buffer I think.

6/28
1. Note previews 
2. Small editor QoLs:
   - append .ptcop to save.
   - update add unit dialog to just use the selected voice.
   - fix small bug in smooth playhead
   - escape focuses the keyboard editor (is this really an improvement?)
3. Replace woice. (Was pretty painless, thanks to the variant setup earlier!)
4. Package for windows, add icon
5. Fix overlapping note previews if you had a trackpad and mouse.
6. Click+scroll can also adjust velocity

6/30
1. Selection

7/1
1. Transpose with selection. But at what cost? Undos are a bit jank with the
   mechanism for existing undos. (Perhaps undoing a tranpose should always
   cause the transpose op to go at the end? Though I don't think it'd play well
   with the sync setup. Another option: vertical shifts are tracked in separate
   d/s (interval tree of offsets representing offset over time) and modify set
   values as postprocessing. This might be a good solution for hshifts too.)
2. Shift+u/d to transpose, else shift vel. Ctrl for wide shift.

7/2
1. Select all

7/3
1. Copy and paste for one unit
2. Clear / cut for one unit
3. Not doing hshifting -- too hard with collab, if you undo others' notes will
   be displaced. If it is done, will prob. have to be separate prim action from
   paste to avoid desync.
4. Unit list table - current unit depends on selection; mute / visible depend
   on checked

7/4
1. Make it easier to check / uncheck
2. Don't highlight / grey muted things out
3. Transpose, copy / paste multiple units

Todo by priority
----------------
 - make it easier to change selection / visible / mute. shortcut for solo?
 - when adding a unit it needs to be more clear what woice to use. just too disjoint rn
 - Tempo, time signature controls
 - show measure num, set loop points
   - will probably need some pixel font thing
 - keyboard on left side of piano roll (probably will help in figuring out how
   to sticky a thing in a scrollview)
 - Adidtional bars for other editing:
   - bottom bar for params like vol, pan, etc.
     - change voice events will require a map from voice id to no
     - linear change tool (see domino)
   - Unit view, at least for drums
     - how many views do you want? the fewer, the easier it is to be 'present'
       with others.
     - something like ptweb
       - can pin instruments to be drums. (list of pinned is global)
 - select operations (keycmds) for other params (once those exist)
 - more inspiration from domino midi!

Misc todo by categories
-----------------------
Aesthetics:
  - The units view is not pretty right now. Unit should have mute icon, visible
    icon, copyable icon. One unit should be selected at a time.
  - customizable piano roll colours
  - qwerty midi input
  - tab system to edit multiple files at once / switch between sessions
  - arcofdream's icon designs for the connect / disconnect menus
  - write / read shiftJIS in unit, woice names.

Technical stuff:
 - server keeps its own state (e.g., active users) + running history (currently
   it plays back -everything-)
   - probably goes hand-in-hand with undo stack, which drawpile limits to
     globally 30. probably a good idea so we don't keep on growing in memory
   - cheap to have large stack
 - seqnums on the server messages.
   - robust if you see an unexpected message from elsewhere (unexpected server
     seqnum?)
   - note: without seqnums, clients do not have a chance if server drops msgs
     to some clients but not others, without seqnums
 - place to see errors like missed writes or unexpected IDs.
   - log on server side history of actions too (maybe exclude editstate).
   - log if a message hasn't roundtripped in a while (consider if there's
     any expected situation where we don't expect roundtrip. prob. not if like
     drawpile)
 - put hello in the protocol.
 - put ping in protocol
 - placing notes is choppy in windows because of note preview lag. how to fix?
   wasapi? miniaudio?
 - static build

Editor functionality:
 - echo & overdrive
 - moving voices up and down
 - edit voice, unit names

Editor QoL:
 - Time bar at the top
 - Don't scroll if last measure changes from some other user
 - follow playhead (seems low pri since no one suggested)
 - ctrl+shift+click is a bit much to do a selection. but ctrl click is note
   tool. Maybe it shouldn't be a modifier but a mode? tools seem reasonable.
 - Better woice previews
   - idea: the pitch could be determined by the last note pressed in a keyboard
     (that has yet been added). this can avoid complicating the file dialog.
   - Add a 'stop all note previews' button
   - Perhaps you could show a mini keyboard for previews under the woice list.
 - see other user's playhead optionally
   - involves: messages for seeking, starting, stopping with clock at X
   - would be real nice to click on a user and jump to their view
     - client would match the seeks and play controls, slightly delaying
       depending on clock desync.
     - client view would also just centre on the other's cursor. prob. with
       matching zoom; or, (harder, not much gain) match window bboxes
 - Play audio while paused but seeking!
 - Scroll if clicking and on edge of pane
   - Not too big a deal - if you need a big interval, zoom out
 - Speed things up.
   - Separate audio thread with locking.
   - Bounding boxes for the undos/redos
     - At least on remote action rollback. You have to undo a prefix from the tip.
     - Also possibly useful for actual undos.
       - actually probably not useful for actual undos because there are cases
         where you'd have to roll everything back anyway.
   - Indexes for searching through list fast
     - according to botb event limit is 500k in the regular editor; here the
       limit is 1M.  could probably handle 1000 events with little lag (1000
       events * 1000 actions = 1M iterations, not too much)
   - Pastes are slow for big songs b/c have to traverse whole evelist for each
     action. Maybe give a hint?
 - don't blip when seeking and playing again (hard due to QAudioOutput behavior)
 - Edit while playing soundness (low priority, unlikely to hit)
   - Add things between last event and next (before / after now?)
   - Delete things. Don't strand the pointer
   - Adjust the length of ON
 - once you click with shift it should stay in seek mode until release.
 - ctrl+shift+alt+click to select snap to measure? sounds a bit crazy honestly.
 - maybe offer quant option for measure (instead of snap to measure select)
 - note preview vel should not be adjustable if you're editing note instead of on
 - allow zero selection interval, and restrict to selection interval if
   nonzero? prob not bc ptcollage doesn't
 - copy / paste improvements
   - maybe slight desync in case haven't seen others' edit? but sort of inevitable.
   - also copy start vol / pan values / tails of an on event.

Low priority:
 - Editor UI: Piano on the left
 - Misc UI: Recent connections dropdown
 - Custom icon for people's names?
 - scale selections by time (with no quantize), then quantize
 - Undo transpose make less jank
 - A chat

Just general format? improvements:
 - A kind of meta instrument that changes depending on parameter or pitch

Running thank-you list:
0. Pixel for making such an awesome music software!
1. Everyone involved in ptweb!
2. Friends and family for supporting this!
3. jaxcheese, neozoid, steedfarmer for testing out with me, making tunes
   together, and giving great feedback!
4. steedfarmer for helping me hunt down this nasty networking bug!
5. arcofdream for helping conceptualize the UI, giving feedback, and testing it
   out!
6. arcofdream, nanoplink, easynam for general programming, UX discussion and
   consulting!
7. jade for testing, finding UI bugs, and providing valuable suggestions!
7. everyone in the pxtone discord servers!
