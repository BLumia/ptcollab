- dynamic height and width
- stopping and starting via space
- seeking
- background
- edit different units
- update last measure is recognized by moo
 - configurable quantization
   - toggle on / off
   - drop down for speccing it
- play / stop buttons
- Saving file
- middle click drag
- have it look decent on scroll limits
5/31
- hear note on play (HARD) - had to factor out the logic independent of the current unit play position
- fix the offset
- zoom according to where cursor is right now
- tried the linear smoothing thing. it was way out of wack. not convergent.
- undo

6/04
- Implement the undo system drawpile uses
- Fix a few things like broken redo (no more chnaging of length 0)

6/6
1. Hook up the network. didn't get working b/c I was distracted but things are
   sending and I think they're generally connected!
2. Status bar, saving with network, reconnecting / starting new server etc.
3. Send view changes / edit state changes.
4. Redo in the right order
5. Demo it in a video, test with friends

6/7
1. Fix issue where other ppl's cursors show up in the wrong position
2. Hook up show-all checkbox properly
3. Users can specify names, show up next to cursor
4. Cursor disappears if user leaves / disconnect from server
5. Show list of connected users on left
6. fixed random bug where startup would loop forever if the file was too big

6/8
1. fix crash when you hold down a non-looping sample for too long
2. realize it's hard to fix the blip
3. I think fixed crash on server restart

6/9
1. alt scroll to change quant
2. ... read a bit about wav formats, turns out there's 8&16 bit linear PCM,
   then 32-bit float and 8-bit mu/a-law. pxtone only supports linear pcm but
   apparently that's usually enough?

   pxtnPulses are the wav / ogg / pt{voice,noise} loaders. pxtnwoice is like a
   variant over them that is the actual voice. then unit is unit.
   use pxtnService::Woice_read pxtnWoice::read to create a new instrument

   the io mate fns are for reading from an existing project.
   what's an assist woice / unit? they're names.

   pxtnUnit is largely - moo state (current woice, pan buffers), names, porta
   state. We could probably just make an extra pxtnUnit for note previews??

   Or still, just make pxtnWoice get stuff for you. Prob better b/c you can
   just directly set the woice. The only thing the unit sampl provides is vel,
   vol, and vol panning. Increment sample doesn't depend on the unit at all
   outside of woice.

6/11
1. Read about qlistview

6/12
1. ability to add units

6/13
1. this std::variant thing worked?!?
2. removing units
  - confirm box for delete
  - autofill name, double click to add
  - switch to unit directly

6/14 
1. more generic binary serialization
2. hopefully unicode?
3. fix crash when you rejoin. it was a deserial transaction mistake!
4. Add instruments! - lots of fumbling around with descriptor
5. remove instruments
6. sticky vel
7. host empty

6/15
1. Build windows version

6/16
1. Fix double voice issue with release rclick
2. Don't use shared ptr array, hopefully better fix now?
3. Exit menu item

6/17
1. fix Save As in windows (save to original file is still broken)
2. fix save to original file in windows. I think?
3. tested 'cross platform' by running in wine simultaneously with linux lol

6/19
1. Discovered that there's a problem with soft disconnects.

6/20
1. headless server sort of

6/21
1. Added logging, I think the thing causing the disconnects was the fact that
   transactions were being added up. So a rollback must've caused like a
   cascade of events written and made the write state weird. (Thanks to tests
   with steedfarmer)
2. Tested with steedfarmer again with the soft disconnect fix. Indeed, no more
   soft disconnects. But still the program sometimes hangs + memory explodes.

   Discoveries:
     - Sometimes a message is not sent if an instrument is simultaneously being added.
     - Hanging seems to be during repeated application of event undos/redos.
     - Hanging happens (in one case at least) after an edit message is dropped
       in roundtrip, prob. because that leads to a ton of local undo/redos.
       - I did see in my debugger like, 200k actions trying to be applied. I
         have no idea how it got to that number.
     - Turns out a message is dropped because QDataStream is not writable if we
       are simultaneously reading from it and hit ReadPastEnd. Dammit. Need
       separate read / write stream
     - But still, why does the action list grow to be so large? that's crazy.
       why does that cause things to hang? And was it really large? Or just
       that things sort of piled up with every additional message?

6/22
1. Figure out bug that causes hanging when an edit action is dropped. When
   having to undo and redo a lot, empty commands get added exponentially.
2. Find and fix a separate bug regarding using the wrong pxtone state to
   compute an undo. Didn't cause any problems this time but could bite in the
   future (e.g., two identical delete would be 'undone' as 2 identical adds
   instead of the second doing nothing)
3. Address QTBUG-63113 by having separate read / write streams. Now messages
   aren't dropped. Or they shouldn't be.

As a general note it's increasingly scary to touch the networking code...
worried about making further breaking changes. Don't have tests, also testing
localhost is just not the right environment.

This kind of thing where msgs get dropped is interesting - seems like a gap
fill architecture could work well.

4. Robust if you see an unexpected message (postel) from yourself.
   - if see later remote id, than what expected, just drop things presumably missed.
   - if earlier, just slot it in b/c everyone sees it in that order.

5. Ability to make server delay / drop msgs artificially

6/23 & 6/26
1. Some playtesting!

Functionality:
 - Click+scroll to change velocity by default.
   Also some way to look at existing note velocity
 - Put in help that shift + click is seek
 - Instrument preview in file select / unit click
 - Copy paste
 - Tempo controls

 - Unit view, at least for drums
   - how many views do you want? the fewer, the easier it is to be 'present'
     with others.
   - something like ptweb
     - can pin instruments to be drums. (list of pinned is global)
 - bottom bar for changing other params like vol, pan, etc.
   - change voice events will require a map from voice id to no
 - moving voices up and down
 - show measure num, set loop points
   - will probably need some pixel font thing
 - set tempo, time signature
 - edit while playing soundness
   - in particular, if a note is added as next event.
 - would be nice to click on a user and jump to their view
 - take some inspiration from domino midi! linear changing of params

Aesthetics:
  customizable piano roll colours
  qwerty midi input
  tab system to edit multiple files at once / switch between sessions

Technical stuff:
 - factor out moo state from pxtn state
   - can then preview notes at the time they're played
     - this is important now that velocity is sticky. ppl should hear notes at
       the right volume
 - server keeps its own state (e.g., active users) + running history (currently
   it plays back -everything-)
 - seqnums on the server messages.
   - robust if you see an unexpected message from elsewhere (unexpected server
     seqnum?)
   - note: without seqnums, clients do not have a chance if server drops msgs
     to some clients but not others, without seqnums
 - add a place where you can easily see errors like missed writes or unexpected
   IDs. log on server side history of actions too (maybe exclude editstate).
   also log if a message hasn't roundtripped in a while (consider if there's
   any expected situation where we don't expect roundtrip. prob. not if like
   drawpile)
 - put hello in the protocol.
 - placing notes is choppy in windows because of note preview lag. how to fix? wasapi?
 - static build
 - drawpile autoresets, so that server doesn't have to send whole history over.
   - probably goes hand-in-hand with undo stack, which drawpile limits to
     globally 30. probably a good idea so we don't keep on growing in memory
   - undo stack is probably sth like: all committed local history prunes after
     reaching size X
   - autoreset is then being able to supply a base ptcop + a history with size
     > X
   - Undo stack isn't actually that important, usually only undo 1-2 at a time.
     But also, cheap to have a large stack.

Editor QoL:
 - Time bar at the top
 - lower bar for editing volume?
 - editing volume, etc. in bottom bar
 - follow playhead
 - Speed things up.
   - Separate audio thread with locking.
   - Bounding boxes for the undos/redos
     - At least on remote action rollback. You have to undo a prefix from the tip.
     - Also possibly useful for actual undos.
       - actually probably not useful for actual undos because there are cases
         where you'd have to roll everything back anyway.
   - Indexes for searching through list fast
     - according to botb event limit is 500k in the regular editor; here the
       limit is 1M.

       could probably handle 1000 events with little lag (1000 events * 1000
       actions = 1M iterations, not too much)
 - don't blip when seeking and playing again (hard due to QAudioOutput behavior)

Edit while playing soundness (low priority, unlikely to hit)
 - Add things between last event and next (before / after now?)
 - Delete things. Don't strand the pointer
 - Adjust the length of ON

Low priority:
 - Workflow: Copy paste - maybe not that important b/c when writing with others you're
   probably just going to be adding notes with them. it's much more like
   doodling! Or at least, it is right now.
 - Editor UI: Piano on the left
 - Misc UI: Recent connections dropdown
 - Custom icon for people's names?

Just general format? improvements:
 - A kind of meta instrument that changes depending on parameter or pitch

